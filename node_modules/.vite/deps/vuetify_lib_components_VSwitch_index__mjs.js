import {
  VSelectionControl,
  makeSelectionControlProps
} from "./chunk-BJPWHD6B.js";
import {
  VInput,
  makeVInputProps,
  useFocus
} from "./chunk-LMRISMR4.js";
import "./chunk-JRR2KIJD.js";
import {
  VProgressCircular
} from "./chunk-UEJLCPGG.js";
import "./chunk-PFT6GITA.js";
import {
  LoaderSlot,
  useLoader
} from "./chunk-UA7DZOWV.js";
import "./chunk-DU5MIT3Q.js";
import "./chunk-J3QF26TP.js";
import {
  useProxiedModel
} from "./chunk-6WCEFBEU.js";
import "./chunk-GZ25VGEX.js";
import "./chunk-AROMZ5T2.js";
import "./chunk-SJQ2DE5W.js";
import "./chunk-77PDG3JG.js";
import "./chunk-FC3WKOP5.js";
import "./chunk-YTXO3CGV.js";
import "./chunk-D6QBBU2R.js";
import "./chunk-JQBELFRD.js";
import "./chunk-BTB4RVGQ.js";
import {
  filterInputAttrs,
  genericComponent,
  getUid,
  propsFactory,
  useRender
} from "./chunk-XKGXTMB6.js";
import {
  computed,
  createVNode,
  mergeProps,
  ref
} from "./chunk-K2Y2XOQ5.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VSwitch/VSwitch.mjs
import "C:/xampp/htdocs/seprojects/recipe-backend-dev (1)/V1/travel-frontend.-main/travel-frontend.-main/node_modules/vuetify/lib/components/VSwitch/VSwitch.css";
var makeVSwitchProps = propsFactory({
  indeterminate: Boolean,
  inset: Boolean,
  flat: Boolean,
  loading: {
    type: [Boolean, String],
    default: false
  },
  ...makeVInputProps(),
  ...makeSelectionControlProps()
}, "v-switch");
var VSwitch = genericComponent()({
  name: "VSwitch",
  inheritAttrs: false,
  props: makeVSwitchProps(),
  emits: {
    "update:focused": (focused) => true,
    "update:modelValue": () => true,
    "update:indeterminate": (val) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const indeterminate = useProxiedModel(props, "indeterminate");
    const model = useProxiedModel(props, "modelValue");
    const {
      loaderClasses
    } = useLoader(props);
    const {
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const loaderColor = computed(() => {
      return typeof props.loading === "string" && props.loading !== "" ? props.loading : props.color;
    });
    const uid = getUid();
    const id = computed(() => props.id || `switch-${uid}`);
    function onChange() {
      if (indeterminate.value) {
        indeterminate.value = false;
      }
    }
    useRender(() => {
      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);
      const [inputProps, _1] = VInput.filterProps(props);
      const [controlProps, _2] = VSelectionControl.filterProps(props);
      const control = ref();
      function onClick(e) {
        var _a, _b;
        e.stopPropagation();
        e.preventDefault();
        (_b = (_a = control.value) == null ? void 0 : _a.input) == null ? void 0 : _b.click();
      }
      return createVNode(VInput, mergeProps({
        "class": ["v-switch", {
          "v-switch--inset": props.inset
        }, {
          "v-switch--indeterminate": indeterminate.value
        }, loaderClasses.value, props.class],
        "style": props.style
      }, inputAttrs, inputProps, {
        "id": id.value,
        "focused": isFocused.value
      }), {
        ...slots,
        default: (_ref2) => {
          let {
            id: id2,
            messagesId,
            isDisabled,
            isReadonly,
            isValid
          } = _ref2;
          return createVNode(VSelectionControl, mergeProps({
            "ref": control
          }, controlProps, {
            "modelValue": model.value,
            "onUpdate:modelValue": [($event) => model.value = $event, onChange],
            "id": id2.value,
            "aria-describedby": messagesId.value,
            "type": "checkbox",
            "aria-checked": indeterminate.value ? "mixed" : void 0,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value,
            "onFocus": focus,
            "onBlur": blur
          }, controlAttrs), {
            ...slots,
            default: () => createVNode("div", {
              "class": "v-switch__track",
              "onClick": onClick
            }, null),
            input: (_ref3) => {
              let {
                textColorClasses,
                textColorStyles
              } = _ref3;
              return createVNode("div", {
                "class": ["v-switch__thumb", textColorClasses.value],
                "style": textColorStyles.value
              }, [props.loading && createVNode(LoaderSlot, {
                "name": "v-switch",
                "active": true,
                "color": isValid.value === false ? void 0 : loaderColor.value
              }, {
                default: (slotProps) => slots.loader ? slots.loader(slotProps) : createVNode(VProgressCircular, {
                  "active": slotProps.isActive,
                  "color": slotProps.color,
                  "indeterminate": true,
                  "size": "16",
                  "width": "2"
                }, null)
              })]);
            }
          });
        }
      });
    });
    return {};
  }
});
export {
  VSwitch
};
//# sourceMappingURL=vuetify_lib_components_VSwitch_index__mjs.js.map
